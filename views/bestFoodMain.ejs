<!--
Author: W3layouts
Author URL: http://w3layouts.com
License: Creative Commons Attribution 3.0 Unported
License URL: http://creativecommons.org/licenses/by/3.0/
-->
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Best Food</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="keywords" content="Staple Food Responsive web template, Bootstrap Web Templates, Flat Web Templates, Android Compatible web template,
	SmartPhone Compatible web template, free WebDesigns for Nokia, Samsung, LG, Sony Ericsson, Motorola web design" />
    <script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false); function hideURLbar(){ window.scrollTo(0,1); } </script>
    <!-- Custom Theme files -->
    <link href="css/bootstrap.css" type="text/css" rel="stylesheet" media="all">
    <link href="css/style.css" type="text/css" rel="stylesheet" media="all">
    <link href="css/font-awesome.css" rel="stylesheet"> <!-- font-awesome icons -->
    <!-- //Custom Theme files -->
    <!-- js -->
    <script src="js/jquery-2.2.3.min.js"></script>
    <!-- //js -->
    <!-- web-fonts -->
    <link href="//fonts.googleapis.com/css?family=Berkshire+Swash" rel="stylesheet">
    <link href="//fonts.googleapis.com/css?family=Yantramanav:100,300,400,500,700,900" rel="stylesheet">
    <!-- //web-fonts -->
</head>

<form style="display:none" name="current_data" id="current_data">
    <input type="hidden" name="url" id="url" value="<%= url %>"/>
    <input type="hidden" name="shop_length" id="shop_length" value=""/>
    <input type="hidden" name="current_lat" id="current_lat" value=""/>
    <input type="hidden" name="current_lon" id="current_lon" value=""/>
    <input type="hidden" name="current_addr" id="current_addr" value=""/>
</form>

<form style="display:none" name="shop_addr_list" id="shop_addr_list">
</form>

<body>
<!-- banner -->
<div class="banner about-w3bnr">
    <!-- header -->
    <div class="header">
        <div class="w3ls-header"><!-- header-one -->
            <div class="container">
                <div class="w3ls-header-left">
                    <p>우리 동네 최고의 맛집</p>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
        <!-- //header-one -->
        <!-- navigation -->
        <div class="navigation agiletop-nav">
            <div class="container">
                <nav class="navbar navbar-default">
                    <!-- Brand and toggle get grouped for better mobile display -->
                    <div class="navbar-header w3l_logo">
                        <button type="button" class="navbar-toggle collapsed navbar-toggle1" data-toggle="collapse" data-target="#bs-megadropdown-tabs">
                            <span class="sr-only">Toggle navigation</span>
                            <span class="icon-bar"></span>
                            <span class="icon-bar"></span>
                            <span class="icon-bar"></span>
                        </button>
                        <h1><a href="main">Befoo<span>Best Food Shop</span></a></h1>
                    </div>
                    <div class="collapse navbar-collapse" id="bs-megadropdown-tabs">
                        <ul class="nav navbar-nav navbar-right">
                            <li><a href="main">Home</a></li>
                            <!-- Mega Menu -->
                            <li class="dropdown">
                                <a href="#" class="dropdown-toggle" data-toggle="dropdown">Menu <b class="caret"></b></a>
                                <ul class="dropdown-menu multi-column columns-3">
                                    <div class="row">
                                        <div class="col-sm-4">
                                            <ul class="multi-column-dropdown">
                                                <h6>Food type</h6>
                                                <li><a href="menu.html">Breakfast</a></li>
                                                <li><a href="menu.html">Lunch</a></li>
                                                <li><a href="menu.html">Dinner</a></li>
                                            </ul>
                                        </div>
                                        <div class="col-sm-4">
                                            <ul class="multi-column-dropdown">
                                                <h6>Cuisine</h6>
                                                <li><a href="menu.html">Indian Recipes</a></li>
                                                <li><a href="menu.html">American Recipes</a></li>
                                                <li><a href="menu.html">French Recipes</a></li>
                                                <li><a href="menu.html">Italian Recipes</a></li>
                                            </ul>
                                        </div>
                                        <div class="col-sm-4">
                                            <ul class="multi-column-dropdown">
                                                <h6>Box type</h6>
                                                <li><a href="menu.html">Diet</a></li>
                                                <li><a href="menu.html">Mini</a></li>
                                                <li><a href="menu.html">Regular</a></li>
                                                <li><a href="menu.html">Special</a></li>
                                            </ul>
                                        </div>
                                        <div class="clearfix"></div>
                                    </div>
                                </ul>
                            </li>
                            <li><a href="about.html">About</a></li>
                            <li class="w3pages"><a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Pages <span class="caret"></span></a>
                                <ul class="dropdown-menu">
                                    <li><a href="icons.html">Web Icons</a></li>
                                    <li><a href="codes.html">Short Codes</a></li>
                                </ul>
                            </li>
                            <li><a href="contact.html" class="active">Contact Us</a></li>
                        </ul>
                    </div>
                    <div class="cart cart box_1">
                        <form action="#" method="post" class="last">
                            <input type="hidden" name="cmd" value="_cart" />
                            <input type="hidden" name="display" value="1" />
                            <button class="w3view-cart" type="submit" name="submit" value=""><i class="fa fa-cart-arrow-down" aria-hidden="true"></i></button>
                        </form>
                    </div>
                </nav>
            </div>
        </div>
        <!-- //navigation -->
    </div>
    <!-- //header-end -->
    <!-- banner-text -->
    <div class="banner-text">
    </div>
</div>
<!-- //banner -->
<!-- breadcrumb -->
<div class="container">
    <ol class="breadcrumb w3l-crumbs">
        <li><a href="#"><i class="fa fa-home"></i> Home</a></li>
        <li class="active">현재 위치 맛집</li>
    </ol>
</div>
<!-- //breadcrumb -->
<!-- contact -->
<div id="contact" class="contact cd-section">
    <h3 class="w3ls-title">Best Food Map</h3>
    <p class="w3lsorder-text">우리 동네의 맛집을 꼭 확인해보세요!!!</p>

    <!-- 지도 확대, 축소 컨트롤 div 입니다 -->
    <div class="custom_zoomcontrol radius_border">
        <span onclick="zoomIn()"><img src="http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/ico_plus.png" alt="확대"></span>
        <span onclick="zoomOut()"><img src="http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/ico_minus.png" alt="축소"></span>
    </div>

    <!-- map -->
    <div id="map" class="map_wrap"></div>
    <!-- //map -->

    <div class="container">
        <div class="contact-row agileits-w3layouts">
            <div class="col-xs-6 col-sm-6 contact-w3lsright" id="map_list_wrap">

                <!--<div class="address-row">
                    <div class="col-xs-2 address-left">
                        <span class="glyphicon glyphicon-home" aria-hidden="true"></span>
                    </div>
                    <div class="col-xs-10 address-right">
                        <span class="icon"><img src="/images/map_load_pin.png"></span>
                        <h5>Visit Us</h5>
                        <span class="price">TEL : 010-2618-1715</span>
                        <p>Broome St, Canada, NY 10002, New York </p>
                    </div>
                    <div class="clearfix"></div>
                </div>

                <div class="address-row">
                    <div class="col-xs-2 address-left">
                        <span class="glyphicon glyphicon-envelope" aria-hidden="true"></span>
                    </div>
                    <div class="col-xs-10 address-right">
                        <h5>Mail Us</h5>
                        <p><a href="mailto:info@example.com"> mail@example.com</a></p>
                    </div>
                    <div class="clearfix"> </div>
                </div>

                <div class="address-row">
                    <div class="col-xs-2 address-left">
                        <span class="glyphicon glyphicon-phone" aria-hidden="true"></span>
                    </div>
                    <div class="col-xs-10 address-right">
                        <h5>Call Us</h5>
                        <p>+01 222 333 4444</p>
                    </div>
                    <div class="clearfix"> </div>
                </div>
-->
            </div>
            <div class="clearfix"> </div>
        </div>
    </div>

</div>
<!-- //contact -->
<div class="copyw3-agile">
    <div class="container">
        <p>&copy; 2017 Staple Food. All rights reserved | Design by <a href="http://w3layouts.com/">W3layouts</a></p>
    </div>
</div>
<!-- //footer -->
<!-- cart-js -->
<script src="js/minicart.js"></script>
<script type="text/javascript" src="//apis.daum.net/maps/maps3.js?apikey=076df8cf69c376d5065c3bc99891a438&libraries=clusterer,services"></script>
<script>
    w3ls.render();

    w3ls.cart.on('w3sb_checkout', function (evt) {
        var items, len, i;

        if (this.subtotal() > 0) {
            items = this.items();

            for (i = 0, len = items.length; i < len; i++) {
            }
        }
    });

    var drawingFlag = true; // 선이 그려지고 있는 상태를 가지고 있을 변수입니다
    var moveLine; // 선이 그려지고 있을때 마우스 움직임에 따라 그려질 선 객체 입니다
    var clickLine // 마우스로 클릭한 좌표로 그려질 선 객체입니다
    var distanceOverlay; // 선의 거리정보를 표시할 커스텀오버레이 입니다
    var dots = {}; // 선이 그려지고 있을때 클릭할 때마다 클릭 지점과 거리를 표시하는 커스텀 오버레이 배열입니다.
    var currentLat = '';
    var currentLon = '';
    var map = '';
    // 주소-좌표 변환 객체를 생성합니다
    var geocoder = new daum.maps.services.Geocoder();


    // 현재 위치 표시
    if (navigator.geolocation) {
        // GeoLocation을 이용해서 접속 위치를 얻어옵니다
        navigator.geolocation.getCurrentPosition(function(position) {
            currentLat = position.coords.latitude; // 위도
            currentLon = position.coords.longitude; // 경도

            var currentMarkerSrc = 'https://s3-ap-northeast-1.amazonaws.com/sbevent/image/current_point.png', // 메인 마커이미지의 주소입니다
                currentMarkerSize = new daum.maps.Size(44, 49), // 메인  마커이미지의 크기입니다
                currentMarkerOption = {offset: new daum.maps.Point(19, 58)}; // 메인 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.

            // 마커의 이미지정보를 가지고 있는 마커이미지를 생성합니다
            var currentMarkerImage = new daum.maps.MarkerImage(currentMarkerSrc, currentMarkerSize, currentMarkerOption);
            var currentMarkerPosition = new daum.maps.LatLng(currentLat, currentLon); // 마커가 표시될 위치입니다

            shopList(currentLat, currentLon);
            // 마커와 인포윈도우를 표시합니다
            displayMarker(currentMarkerPosition, currentMarkerImage);
        });

    } else { // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다
        // 마커의 이미지정보를 가지고 있는 마커이미지를 생성합니다
        console.log("fail the geolocation")
        var locPosition = new daum.maps.LatLng(37.5633, 126.993); // 마커가 표시될 위치를 geolocation으로 얻어온 좌표로 생성합니다
        markerContentN = 'GPS 연결을 확인하여 주십시오';

        // 마커를 생성합니다
        var marker = new daum.maps.Marker({
            map: map,
            position: locPosition,
            image: markerContentN // 마커이미지 설정
        });

        displayMarker(currentMarkerPosition, currentMarkerImage);
    }

    //Shop List
    function shopList(currentLat, currentLon) {
        var dataString = {'current_lat': currentLat, 'current_lon': currentLon};
        $.ajax({
            url: $("#url").val() + '/foods/foodShopList',
            type: 'GET',
            dataType: 'json',
            data: dataString,
            success: function(data) {
                var shopData = data.shopData;
                $("#shop_length").val(shopData.length);
                $("#current_addr").val(data.address);
                var shopDataList = document.getElementById('map_list_wrap');
                var shopAddrList = document.getElementById('shop_addr_list');
                shopDataList.innerHTML = '';
                shopAddrList.innerHTML = '';

                for(var i=0; i<shopData.length; i++){
                    shopDataList.innerHTML += '<div class="address-row">' +
                        '<div class="col-xs-2 address-left">' +
                            '<span class="glyphicon glyphicon-home" aria-hidden="true"></span>' +
                        '</div>' +
                        '<div class="col-xs-10 address-right">' +
                            '<a href="#"><span class="icon" onclick="guideLoad('+ i +')"><img src="/images/map_load_pin.png"></span></a>' +
                            '<h5>'+ shopData[i].SHOP_NAME +'</h5>' +
                            '<span class="phone">TEL : '+ shopData[i].SHOP_PHONE +'</span>' +
                            '<p>'+ shopData[i].SHOP_ADDR +'</p>' +
                        '</div>' +
                        '<div class="clearfix"> </div>' +
                        '</div>';
                    shopAddrList.innerHTML += '<input type="hidden" name="shop_lat_'+ i +'" id="shop_lat_'+ i +'" value="'+ shopData[i].SHOP_LAT +'"/>'+
                        '<input type="hidden" name="shop_lon_'+ i +'" id="shop_lon_'+ i +'" value="'+ shopData[i].SHOP_LON +'"/>'+
                        '<input type="hidden" name="shop_addr_'+ i +'" id="shop_addr_'+ i +'" value="'+ shopData[i].SHOP_ADDR +'"/>'+
                        '<input type="hidden" name="shop_name_'+ i +'" id="shop_name_'+ i +'" value="'+ shopData[i].SHOP_NAME +'"/>';
                }
            },
            error: function(request, status, error) {
                console.log("code:"+request.status+"\n"+"message:"+request.responseText+"\n"+"error:"+error);
                console.log('Error occured');
            }
        });
    }

    // 지도에 마커와 인포윈도우를 표시하는 함수입니다
    function displayMarker(currentMarkerPosition, currentMarkerImage) {
        var mapContainer = document.getElementById('map'), // 지도를 표시할 div
            mapOption = {
                center: currentMarkerPosition, // 지도의 중심좌표
                level: 10 // 지도의 확대 레벨
            };

        map = new daum.maps.Map(mapContainer, mapOption); // 지도를 생성합니다
        map.setDraggable(true);
        map.setZoomable(false);

        initClicn(currentMarkerPosition);

        // 현재 지도 중심좌표로 주소를 검색해서 지도 좌측 상단에 표시합니다
        searchAddrFromCoords(map.getCenter(), shopMarkerList);

        // 지도에 클릭 이벤트를 등록합니다
        // 지도를 클릭하면 선 그리기가 시작됩니다 그려진 선이 있으면 지우고 다시 그립니다
        daum.maps.event.addListener(map, 'click', function(mouseEvent) {

            // 마우스로 클릭한 위치입니다
            var clickPosition = mouseEvent.latLng;

            // 그려지고 있는 선의 좌표 배열을 얻어옵니다
            var path = clickLine.getPath();

            // 좌표 배열에 클릭한 위치를 추가합니다
            path.push(clickPosition);

            // 다시 선에 좌표 배열을 설정하여 클릭 위치까지 선을 그리도록 설정합니다
            clickLine.setPath(path);

            var distance = Math.round(clickLine.getLength());
            displayCircleDot(clickPosition, distance);

            // 지도 오른쪽 클릭 이벤트가 발생했는데 선을 그리고있는 상태이면
            if (drawingFlag) {

                // 마우스무브로 그려진 선은 지도에서 제거합니다
                moveLine.setMap(null);
                moveLine = null;

                // 마우스 클릭으로 그린 선의 좌표 배열을 얻어옵니다
                var path = clickLine.getPath();

                // 선을 구성하는 좌표의 개수가 2개 이상이면
                if (path.length > 1) {

                    // 마지막 클릭 지점에 대한 거리 정보 커스텀 오버레이를 지웁니다
                    if (dots[dots.length-1].distance) {
                        dots[dots.length-1].distance.setMap(null);
                        dots[dots.length-1].distance = null;
                    }

                    var distance = Math.round(clickLine.getLength()), // 선의 총 거리를 계산합니다
                        content = getTimeHTML(distance); // 커스텀오버레이에 추가될 내용입니다

                    // 그려진 선의 거리정보를 지도에 표시합니다
                    showDistance(content, path[path.length-1]);

                }

                // 상태를 false로, 그리지 않고 있는 상태로 변경합니다
                drawingFlag = false;
            }else {

                // 선을 구성하는 좌표의 개수가 1개 이하이면
                // 지도에 표시되고 있는 선과 정보들을 지도에서 제거합니다.
                deleteClickLine();
                deleteCircleDot();
                deleteDistnce();

                var markerPositionN = new daum.maps.LatLng(currentLat, currentLon); // 마커가 표시될 위치입니다
                initClicn(markerPositionN);
                drawingFlag = true;
            }
        });

        // 지도에 마우스무브 이벤트를 등록합니다
        // 선을 그리고있는 상태에서 마우스무브 이벤트가 발생하면 그려질 선의 위치를 동적으로 보여주도록 합니다
        daum.maps.event.addListener(map, 'mousemove', function (mouseEvent) {

            // 지도 마우스무브 이벤트가 발생했는데 선을 그리고있는 상태이면
            if (drawingFlag){

                // 마우스 커서의 현재 위치를 얻어옵니다
                var mousePosition = mouseEvent.latLng;

                // 마우스 클릭으로 그려진 선의 좌표 배열을 얻어옵니다
                var path = clickLine.getPath();

                // 마우스 클릭으로 그려진 마지막 좌표와 마우스 커서 위치의 좌표로 선을 표시합니다
                var movepath = [path[path.length-1], mousePosition];
                moveLine.setPath(movepath);
                moveLine.setMap(map);

                var distance = Math.round(clickLine.getLength() + moveLine.getLength()), // 선의 총 거리를 계산합니다
                    content = '<div class="dotOverlay distanceInfo">현재 위치와의 거리 <span class="number">' + distance + '</span>m</div>'; // 커스텀오버레이에 추가될 내용입니다

                // 거리정보를 지도에 표시합니다
                showDistance(content, mousePosition);
            }
        });
    }

    function initClicn(currentMarkerPosition) {
        deleteCircleDot();
        clickLine = new daum.maps.Polyline({
            map: map, // 선을 표시할 지도입니다
            path: [currentMarkerPosition], // 선을 구성하는 좌표 배열입니다 클릭한 위치를 넣어줍니다
            strokeWeight: 3, // 선의 두께입니다
            strokeColor: '#db4040', // 선의 색깔입니다
            strokeOpacity: 1, // 선의 불투명도입니다 0에서 1 사이값이며 0에 가까울수록 투명합니다
            strokeStyle: 'solid' // 선의 스타일입니다
        });

        // 선이 그려지고 있을 때 마우스 움직임에 따라 선이 그려질 위치를 표시할 선을 생성합니다
        moveLine = new daum.maps.Polyline({
            strokeWeight: 0, // 선의 두께입니다
            strokeColor: '#db4040', // 선의 색깔입니다
            strokeOpacity: 0.5, // 선의 불투명도입니다 0에서 1 사이값이며 0에 가까울수록 투명합니다
            strokeStyle: 'solid' // 선의 스타일입니다
        });

        // 마우스 커서의 현재 위치를 얻어옵니다
        var mousePosition = currentMarkerPosition;
        // 마우스 클릭으로 그려진 선의 좌표 배열을 얻어옵니다
        var path = clickLine.getPath();

        // 마우스 클릭으로 그려진 마지막 좌표와 마우스 커서 위치의 좌표로 선을 표시합니다
        var movepath = [path[path.length-1], mousePosition];
        moveLine.setPath(movepath);
        moveLine.setMap(map);

        var distance = Math.round(clickLine.getLength() + moveLine.getLength()), // 선의 총 거리를 계산합니다
            content = '<div class="dotOverlay distanceInfo">현재 위치<span class="number">' + distance + '</span>m</div>'; // 커스텀오버레이에 추가될 내용입니다

        // 거리정보를 지도에 표시합니다
        showDistance(content, mousePosition);
        displayCircleDot(mousePosition, 0);
    }

    // 클릭으로 그려진 선을 지도에서 제거하는 함수입니다
    function deleteClickLine() {
        if (clickLine) {
            clickLine.setMap(null);
            clickLine = null;
        }
    }

    // 마우스 드래그로 그려지고 있는 선의 총거리 정보를 표시하거
    // 마우스 오른쪽 클릭으로 선 그리가 종료됐을 때 선의 정보를 표시하는 커스텀 오버레이를 생성하고 지도에 표시하는 함수입니다
    function showDistance(content, position) {

        if (distanceOverlay) { // 커스텀오버레이가 생성된 상태이면

            // 커스텀 오버레이의 위치와 표시할 내용을 설정합니다
            distanceOverlay.setPosition(position);
            distanceOverlay.setContent(content);

        } else { // 커스텀 오버레이가 생성되지 않은 상태이면

            // 커스텀 오버레이를 생성하고 지도에 표시합니다
            distanceOverlay = new daum.maps.CustomOverlay({
                map: map, // 커스텀오버레이를 표시할 지도입니다
                content: content,  // 커스텀오버레이에 표시할 내용입니다
                position: position, // 커스텀오버레이를 표시할 위치입니다.
                xAnchor: 0,
                yAnchor: 0,
                zIndex: 3
            });
        }
    }

    // 그려지고 있는 선의 총거리 정보와
    // 선 그리가 종료됐을 때 선의 정보를 표시하는 커스텀 오버레이를 삭제하는 함수입니다
    function deleteDistnce () {
        if (distanceOverlay) {
            distanceOverlay.setMap(null);
            distanceOverlay = null;
        }
    }

    // 선이 그려지고 있는 상태일 때 지도를 클릭하면 호출하여
    // 클릭 지점에 대한 정보 (동그라미와 클릭 지점까지의 총거리)를 표출하는 함수입니다
    function displayCircleDot(position, distance) {
        // 클릭 지점을 표시할 빨간 동그라미 커스텀오버레이를 생성합니다
        var circleOverlay = new daum.maps.CustomOverlay({
            content: '<span class="dot"></span>',
            position: position,
            zIndex: 1
        });

        // 지도에 표시합니다
        circleOverlay.setMap(map);

        if (distance > 0) {
            // 클릭한 지점까지의 그려진 선의 총 거리를 표시할 커스텀 오버레이를 생성합니다
            var distanceOverlay = new daum.maps.CustomOverlay({
                content: '<div class="dotOverlay">거리 <span class="number">' + distance + '</span>m</div>',
                position: position,
                yAnchor: 1,
                zIndex: 2
            });

            // 지도에 표시합니다
            distanceOverlay.setMap(map);
        }

        // 배열에 추가합니다
        dots.push({circle:circleOverlay, distance: distanceOverlay});
    }

    // 클릭 지점에 대한 정보 (동그라미와 클릭 지점까지의 총거리)를 지도에서 모두 제거하는 함수입니다
    function deleteCircleDot() {
        var i;

        for ( i = 0; i < dots.length; i++ ){
            if (dots[i].circle) {
                dots[i].circle.setMap(null);
            }

            if (dots[i].distance) {
                dots[i].distance.setMap(null);
            }
        }

        dots = [];
    }

    // 마우스 우클릭 하여 선 그리기가 종료됐을 때 호출하여
    // 그려진 선의 총거리 정보와 거리에 대한 도보, 자전거 시간을 계산하여
    // HTML Content를 만들어 리턴하는 함수입니다
    function getTimeHTML(distance) {

        // 도보의 시속은 평균 4km/h 이고 도보의 분속은 67m/min입니다
        var walkkTime = distance / 67 | 0;
        var walkHour = '', walkMin = '';

        // 계산한 도보 시간이 60분 보다 크면 시간으로 표시합니다
        if (walkkTime > 60) {
            walkHour = '<span class="number">' + Math.floor(walkkTime / 60) + '</span>시간 '
        }
        walkMin = '<span class="number">' + walkkTime % 60 + '</span>분'

        // 자전거의 평균 시속은 16km/h 이고 이것을 기준으로 자전거의 분속은 267m/min입니다
        var bycicleTime = distance / 227 | 0;
        var bycicleHour = '', bycicleMin = '';

        // 계산한 자전거 시간이 60분 보다 크면 시간으로 표출합니다
        if (bycicleTime > 60) {
            bycicleHour = '<span class="number">' + Math.floor(bycicleTime / 60) + '</span>시간 '
        }
        bycicleMin = '<span class="number">' + bycicleTime % 60 + '</span>분'

        // 자동차의 평균 시속을 50km/h 이라하고 이것을 기준으로 자동차의 분속은 833m/min입니다
        var carTime = distance / 833 | 0;
        var carHour = '', carMin = '';

        // 계산한 자전거 시간이 60분 보다 크면 시간으로 표출합니다
        if (carTime > 60) {
            carHour = '<span class="number">' + Math.floor(carTime / 60) + '</span>시간 '
        }

        if (carTime % 60 > 0){
            carMin = '<span class="number">' + carTime % 60 + '</span>분'
        }else {
            carMin = '<span class="number">1</span>분'
        }

        // 거리와 도보 시간, 자전거 시간을 가지고 HTML Content를 만들어 리턴합니다
        var content = '<ul class="dotOverlay distanceInfo">';
        content += '    <li>';
        content += '        <span class="distance_label">(직선거리 대략시간)</span>';
        content += '    </li>';
        content += '    <li>';
        content += '        <span class="distance_label">총거리</span><span class="number">' + distance + '</span>m';
        content += '    </li>';
        content += '    <li>';
        content += '        <span class="distance_label">도보</span>' + walkHour + walkMin;
        content += '    </li>';
        content += '    <li>';
        content += '        <span class="distance_label">자전거</span>' + bycicleHour + bycicleMin;
        content += '    </li>';
        content += '    <li>';
        content += '        <span class="distance_label">자동차</span>' + carHour + carMin;
        content += '    </li>';
        content += '</ul>'

        return content;
    }

    // 지도타입 컨트롤의 지도 또는 스카이뷰 버튼을 클릭하면 호출되어 지도타입을 바꾸는 함수입니다
    function setMapType(maptype) {
        var roadmapControl = document.getElementById('btnRoadmap');
        var skyviewControl = document.getElementById('btnSkyview');
        if (maptype === 'roadmap') {
            map.setMapTypeId(daum.maps.MapTypeId.ROADMAP);
            roadmapControl.className = 'selected_btn';
            skyviewControl.className = 'btn';
        } else {
            map.setMapTypeId(daum.maps.MapTypeId.HYBRID);
            skyviewControl.className = 'selected_btn';
            roadmapControl.className = 'btn';
        }
    }

    // 지도 확대, 축소 컨트롤에서 확대 버튼을 누르면 호출되어 지도를 확대하는 함수입니다
    function zoomIn() {
        map.setLevel(map.getLevel() - 1);
    }

    // 지도 확대, 축소 컨트롤에서 축소 버튼을 누르면 호출되어 지도를 확대하는 함수입니다
    function zoomOut() {
        map.setLevel(map.getLevel() + 1);
    }

    function guideLoad(index) {
        var currentAddr = $("#current_addr").val();
        var shopAddr = $("#shop_addr_"+index).val();
        var shopName = $("#shop_name_"+index).val();
        var shopLat = $("#shop_lat_"+index).val();
        var shopLon = $("#shop_lon_"+index).val();

        if(document.documentElement.clientWidth >= 736) {
            location.href="http://map.daum.net/?map_type=TYPE_SKYVIEW&map_hybrid=true&target=car&sName="+ currentAddr +"&eName="+ shopAddr +"";
        }else {
            // 지도를 재설정할 범위정보를 가지고 있을 LatLngBounds 객체를 생성합니다
            var bounds = new daum.maps.LatLngBounds();
            var imageSrc = "	https://s3-ap-northeast-1.amazonaws.com/sbevent/image/shop_point.png";
            var imageSize = new daum.maps.Size(44, 51);
            var markerImage = new daum.maps.MarkerImage(imageSrc, imageSize);

            var moveMarker = new daum.maps.Marker({
                position : new daum.maps.LatLng(shopLat, shopLon),
                image : markerImage, // 마커 이미지
                clickable: true
            });
            moveMarker.setMap(map);

            var mouseEvent = {
                latLng: new daum.maps.LatLng(shopLat, shopLon)
            };

            if(drawingFlag) {
                daum.maps.event.trigger(map, 'click', mouseEvent);
            }else {
                daum.maps.event.trigger(map, 'click', mouseEvent);
                daum.maps.event.trigger(map, 'click', mouseEvent);
            }

            // LatLngBounds 객체에 좌표를 추가합니다
            bounds.extend(new daum.maps.LatLng(shopLat, shopLon));

            // LatLngBounds 객체에 추가된 좌표들을 기준으로 지도의 범위를 재설정합니다
            // 이때 지도의 중심좌표와 레벨이 변경될 수 있습니다
            map.setBounds(bounds);
        }
    }

    function shopMarkerList(status, result) {
        // 마커 클러스터러를 생성합니다
        // 마커 클러스터러를 생성할 때 disableClickZoom 값을 true로 지정하지 않은 경우
        // 클러스터 마커를 클릭했을 때 클러스터 객체가 포함하는 마커들이 모두 잘 보이도록 지도의 레벨과 영역을 변경합니다
        // 이 예제에서는 disableClickZoom 값을 true로 설정하여 기본 클릭 동작을 막고
        // 클러스터 마커를 클릭했을 때 클릭된 클러스터 마커의 위치를 기준으로 지도를 1레벨씩 확대합니다
        var clusterer = new daum.maps.MarkerClusterer({
            map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체
            averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정
            minLevel: 10, // 클러스터 할 최소 지도 레벨
            disableClickZoom: true // 클러스터 마커를 클릭했을 때 지도가 확대되지 않도록 설정한다
        });

        var loadMarker='';
        if (status === daum.maps.services.Status.OK) {
            console.log(result[0].fullName);
            var splitName = (result[0].fullName).split(' ');

            switch(splitName[0]) {
                case '서울':
                    alert('서울');
                    break;
                case '경기도':
                    loadMarker+='/seoul';
                    switch(splitName[1]) {
                        case '고양시':
                            switch(splitName[2]) {
                                case '덕양구':
                                    loadMarker+='/gangnam';
                                    break;
                                case '일산동구':
                                    alert('고양시 일산동구');
                                    break;
                                case '일산서구':
                                    alert('고양시 일산서구');
                                    break;
                            }
                    }
            }
        }
        // 데이터를 가져오기 위해 jQuery를 사용합니다
        // 데이터를 가져와 마커를 생성하고 클러스터러 객체에 넘겨줍니다
        $.get("/mapData/"+ loadMarker +".json", function(data) {
            // 데이터에서 좌표 값을 가지고 마커를 표시합니다
            // 마커 클러스터러로 관리할 마커 객체는 생성할 때 지도 객체를 설정하지 않습니다
            var imageSrc = "	https://s3-ap-northeast-1.amazonaws.com/sbevent/image/shop_point.png";
            var imageSize = new daum.maps.Size(44, 51);
            var markerImage = new daum.maps.MarkerImage(imageSrc, imageSize);
            var markers = $(data.positions).map(function(i, position) {
                return new daum.maps.Marker({
                    position : new daum.maps.LatLng(position.lat, position.lng),
                    image : markerImage, // 마커 이미지
                    clickable: true
                });
            });

            // 클러스터러에 마커들을 추가합니다
            clusterer.addMarkers(markers);
        });

        // 마커 클러스터러에 클릭이벤트를 등록합니다
        // 마커 클러스터러를 생성할 때 disableClickZoom을 true로 설정하지 않은 경우
        // 이벤트 헨들러로 cluster 객체가 넘어오지 않을 수도 있습니다
        daum.maps.event.addListener(clusterer, 'clusterclick', function(cluster) {

            // 현재 지도 레벨에서 1레벨 확대한 레벨
            var level = map.getLevel()-1;

            // 지도를 클릭된 클러스터의 마커의 위치를 기준으로 확대합니다
            map.setLevel(level, {anchor: cluster.getCenter()});
        });
    }

    function searchAddrFromCoords(coords, callback) {
        // 좌표로 행정동 주소 정보를 요청합니다
        geocoder.coord2addr(coords, callback);
    }
</script>
<!-- //cart-js -->
<!-- start-smooth-scrolling -->
<script src="js/SmoothScroll.min.js"></script>
<script type="text/javascript" src="js/move-top.js"></script>
<script type="text/javascript" src="js/easing.js"></script>
<script type="text/javascript">
    jQuery(document).ready(function($) {
        $(".scroll").click(function(event){
            event.preventDefault();

            $('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
        });
    });
</script>
<!-- //end-smooth-scrolling -->
<!-- smooth-scrolling-of-move-up -->
<script type="text/javascript">
    $(document).ready(function() {
        /*
         var defaults = {
         containerID: 'toTop', // fading element id
         containerHoverID: 'toTopHover', // fading element hover id
         scrollSpeed: 1200,
         easingType: 'linear'
         };
         */

        $().UItoTop({ easingType: 'easeOutQuart' });

    });
</script>
<!-- //smooth-scrolling-of-move-up -->
<!-- Bootstrap core JavaScript
================================================== -->
<!-- Placed at the end of the document so the pages load faster -->
<script src="js/bootstrap.js"></script>
</body>
</html>